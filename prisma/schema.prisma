generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "typedSql", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  username String   @unique @db.VarChar(32)
  password String   @db.VarChar()
  joined   DateTime @default(now())
  bio      String?  @db.VarChar(256)
  role     Role     @default(BASIC)

  communitiesFollowing   Community[] @relation("communityFollowers")
  communitiesAdminOf     Community[] @relation("communityAdmin")
  communitiesModeratorOf Community[] @relation("communityModerators")
  posts                  Post[]
  postsUpvoted           Post[]      @relation("postUpvotes")
  postsDownvoted         Post[]      @relation("postDownvotes")
  replies                Reply[]     @relation("replyAuthor")
}

model Community {
  id Int @id @default(autoincrement())
  // a Community is a collection of posts.

  urlName       String   @unique @db.VarChar(32) // to have the community accessible by url
  canonicalName String   @db.VarChar(64) // less formal/restricted version of the community name, for show
  description   String?  @db.VarChar(256) // short description of community's purpose
  wiki          String? // markdown string representing a "document" of info about the community
  status        Status   @default(ACTIVE)
  // "ACTIVE": anyone can post and reply, the community is visible on global search and profiles
  // "FROZEN": "read-only" mode, no posting/replying/editing/voting, not visible on global search
  // "HIDDEN": same as above, but only admin can see comm (do we need this?)
  created       DateTime @default(now())
  lastActivity  DateTime @default(now())

  followers  User[]   @relation("communityFollowers")
  admin      User     @relation("communityAdmin", fields: [adminId], references: [id])
  adminId    Int
  moderators User[]   @relation("communityModerators")
  posts      Post[]   @relation("postCommunity")
  replies    Reply[]  @relation("replyCommunity")
  actions    Action[] @relation("actionCommunity")
}

model Post {
  id String @id @default(cuid())
  // a Post is a document with content and a tree of replies.

  title      String    @db.VarChar(64)
  content    String // string with markdown
  datePosted DateTime  @default(now())
  lastEdited DateTime?
  status     Status    @default(ACTIVE)
  // "ACTIVE": anyone can see and reply
  // "FROZEN": anyone can see, but replies and votes are locked
  // "HIDDEN": same as above, but the author and content is rendered blank, and is excluded from author's content history
  pinned     Boolean   @default(false) // if true, goes to the top of the Community post listing on index view

  author      User        @relation(fields: [authorId], references: [id])
  authorId    Int
  community   Community   @relation("postCommunity", fields: [communityId], references: [id])
  communityId Int
  replies     Reply[]     @relation("replyPost")
  upvotes     User[]      @relation("postUpvotes")
  downvotes   User[]      @relation("postDownvotes")
  rating      PostRating? @relation("postRating")
}

view PostRating {
  post             Post   @relation("postRating", fields: [postId], references: [id])
  postId           String @unique
  topScore         Int
  bestScore        Float
  hotScore         Float
  controversyScore Float
}

model Reply {
  id String @id @default(cuid())
  // a Reply is a string of content that is attached to a Post.

  content    String // string with limited markdown
  datePosted DateTime @default(now())
  upvotes    Int
  downvotes  Int
  status     Status   @default(ACTIVE)
  // "ACTIVE": anyone can see and reply
  // "FROZEN": anyone can see, but replies and votes are locked
  // "HIDDEN": same as above, but the author and content is rendered blank, and is excluded from author's content history
  pinned     Boolean  @default(false) // if true, goes to the top of the Post reply listing on primary view

  author      User      @relation("replyAuthor", fields: [authorId], references: [id])
  authorId    Int
  community   Community @relation("replyCommunity", fields: [communityId], references: [id])
  communityId Int
  post        Post      @relation("replyPost", fields: [postId], references: [id])
  postId      String
  parent      Reply?    @relation("replyParent", fields: [parentId], references: [id])
  parentId    String?
  children    Reply[]   @relation("replyParent")
}

model Action {
  id Int @id @default(autoincrement())
  // an Action is a string that reflects something done in a Community. Communities maintain public action logs.
  // examples: 
  // - Admin `(username)` appointed user `(username)` to Moderator.
  // - Moderator `(username)` froze reply `(reply id)` in post `(post id)`
  // - User `(username)` created post `(post id)`
  // - User `(username)` edited reply `(reply id)` in post `(post id)`

  date     DateTime @default(now())
  activity String

  community   Community @relation("actionCommunity", fields: [communityId], references: [id])
  communityId Int
}

enum Role {
  BASIC
  ADMIN
}

enum Status {
  ACTIVE
  FROZEN
  HIDDEN
}
