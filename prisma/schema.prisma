generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "typedSql", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  username String   @unique @db.VarChar(32)
  password String   @db.VarChar()
  joined   DateTime @default(now())
  bio      String?  @db.VarChar(256)
  role     Role     @default(BASIC)

  communitiesFollowing   Community[] @relation("communityFollowers")
  communitiesAdminOf     Community[] @relation("communityAdmin")
  communitiesModeratorOf Community[] @relation("communityModerators")
  posts                  Post[]
  postsUpvoted           Post[]      @relation("postUpvotes")
  postsDownvoted         Post[]      @relation("postDownvotes")
  replies                Reply[]     @relation("replyAuthor")
  repliesUpvoted         Reply[]     @relation("replyUpvotes")
  repliesDownvoted       Reply[]     @relation("replyDownvotes")
  actions                Action[]    @relation("actionUser")
}

model Community {
  id Int @id @default(autoincrement())

  urlName       String   @unique @db.VarChar(32)
  canonicalName String   @db.VarChar(64)
  description   String?  @db.VarChar(256)
  wiki          String?
  created       DateTime @default(now())
  lastActivity  DateTime @default(now())
  readonly      Boolean  @default(false)

  followers  User[]   @relation("communityFollowers")
  admin      User     @relation("communityAdmin", fields: [adminId], references: [id])
  adminId    Int
  moderators User[]   @relation("communityModerators")
  posts      Post[]   @relation("postCommunity")
  actions    Action[] @relation("actionCommunity")
}

model Post {
  id String @id @default(nanoid(10))

  title      String    @db.VarChar(64)
  content    String
  datePosted DateTime  @default(now())
  lastEdited DateTime?
  pinned     Boolean   @default(false)
  readonly   Boolean   @default(false)

  author      User        @relation(fields: [authorId], references: [id])
  authorId    Int
  community   Community   @relation("postCommunity", fields: [communityId], references: [id])
  communityId Int
  replies     Reply[]     @relation("replyPost")
  upvotes     User[]      @relation("postUpvotes")
  downvotes   User[]      @relation("postDownvotes")
  rating      PostRating? @relation("postRating")
}

view PostRating {
  post             Post   @relation("postRating", fields: [postId], references: [id])
  postId           String @unique
  topScore         Int
  bestScore        Float
  hotScore         Float
  controversyScore Float
}

model Reply {
  id String @id @default(nanoid(10))

  content    String
  datePosted DateTime @default(now())
  pinned     Boolean  @default(false)
  hidden     Boolean  @default(false)

  author    User         @relation("replyAuthor", fields: [authorId], references: [id])
  authorId  Int
  post      Post         @relation("replyPost", fields: [postId], references: [id])
  postId    String
  parent    Reply?       @relation("replyParent", fields: [parentId], references: [id])
  parentId  String?
  children  Reply[]      @relation("replyParent")
  upvotes   User[]       @relation("replyUpvotes")
  downvotes User[]       @relation("replyDownvotes")
  rating    ReplyRating? @relation("replyRating")
}

view ReplyRating {
  reply            Reply  @relation("replyRating", fields: [replyId], references: [id])
  replyId          String @unique
  topScore         Int
  bestScore        Float
  hotScore         Float
  controversyScore Float
}

model Action {
  id Int @id @default(autoincrement())

  date           DateTime   @default(now())
  actionType     ActionType
  actionObjectId String?

  actor       User      @relation("actionUser", fields: [actorId], references: [id])
  actorId     Int
  community   Community @relation("actionCommunity", fields: [communityId], references: [id])
  communityId Int
}

enum Role {
  BASIC
  ADMIN
}

enum ActionType {
  CreateCommunity
  EditCommunity
  EditWiki
  PromoteMod
  DemoteMod
  FreezeCommunity
  UnfreezeCommunity
  CreatePost
  EditPost
  FreezePost
  UnfreezePost
  CreateReply
  HideReply
  UnhideReply
}
